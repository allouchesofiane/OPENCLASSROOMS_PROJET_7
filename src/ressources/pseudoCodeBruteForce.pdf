ALGORITHME BruteForce
ENTRÉE: 
    names[] ← liste des noms d'actions
    prices[] ← liste des prix des actions  
    pcts[] ← liste des pourcentages de rendement
    budget ← budget maximum disponible

VARIABLES:
    n ← longueur de prices[]
    meilleur_profit ← 0.0
    meilleur_cout ← 0.0  
    meilleure_combinaison ← NULL

DÉBUT:
    // Générer toutes les combinaisons binaires possibles (2^n)
    POUR chaque combinaison DANS produit_cartésien({0,1}, répété n fois):
        
        // Calculer le coût de cette combinaison
        cout_actuel ← 0.0
        POUR i DE 0 À n-1:
            SI combinaison[i] = 1 ALORS:
                cout_actuel ← cout_actuel + prices[i]
        FIN POUR
        
        // Vérifier la contrainte de budget
        SI cout_actuel > budget ALORS:
            CONTINUER // Passer à la combinaison suivante
        FIN SI
        
        // Calculer le profit de cette combinaison
        profit_actuel ← 0.0
        POUR i DE 0 À n-1:
            SI combinaison[i] = 1 ALORS:
                profit_actuel ← profit_actuel + (prices[i] × pcts[i] / 100)
        FIN POUR
        
        // Mettre à jour le meilleur résultat si nécessaire
        SI profit_actuel > meilleur_profit ALORS:
            meilleur_profit ← profit_actuel
            meilleur_cout ← cout_actuel
            meilleure_combinaison ← combinaison
        FIN SI
        
    FIN POUR
    
    // Construire le dictionnaire des actions sélectionnées
    actions_selectionnees ← dictionnaire_vide
    SI meilleure_combinaison ≠ NULL ALORS:
        POUR i DE 0 À n-1:
            SI meilleure_combinaison[i] = 1 ALORS:
                actions_selectionnees[names[i]] ← 1
        FIN POUR
    FIN SI
    
    // Retourner les résultats
    resume ← {"Total Profit": arrondir(meilleur_profit, 2)}
    cout ← {"Best cost": arrondir(meilleur_cout, 2)}
    RETOURNER (resume, actions_selectionnees, cout)

FIN ALGORITHME